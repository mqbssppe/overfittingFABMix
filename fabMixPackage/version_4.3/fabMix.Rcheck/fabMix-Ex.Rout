
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fabMix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "fabMix-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('fabMix')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fabMix-package")
> ### * fabMix-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix-package
> ### Title: Overfitting Bayesian Mixtures of Factor Analyzers with
> ###   Parsimonious Covariance and Unknown Number of Components
> ### Aliases: fabMix-package
> ### Keywords: package
> 
> ### ** Examples
> 
> # TOY EXAMPLE (very small numbers... only for CRAN check purposes)
> 
> #################################################################
> # (a) using 2 cores in parallel, each one running 2 heated chains.
> #################################################################
> library('fabMix')
> 
> n = 8                # sample size
> p = 5                # number of variables
> q = 2                # number of factors
> K = 2		     # true number of clusters
> 
> sINV_diag = 1/((1:p))	 # diagonal of inverse variance of errors
> set.seed(100)
> syntheticDataset <- simData(sameLambda=TRUE,K.true = K, n = n, q = q, p = p, 
+ 			sINV_values = sINV_diag)
Simulation parameters: 
   n = 8 
   p = 5 
   q = 2 
   K = 2 
> colnames(syntheticDataset$data) <- paste0("x_",1:p)
> 
> # Run `fabMix` for a _small_ number of iterations for the 
> #	`UUU` (maximal model) and `CCC` (minimal model) parameterizations,
> # 	using the default prior parallel heating parameters `dirPriorAlphas`.
> #	NOTE: `dirPriorAlphas` may require some tuning in general.
> 
> 
> qRange <- 2	# values for the number of factors (only the true number 
> #                                                    is considered here)
> Kmax <- 4	# number of components for the overfitted mixture model
> nChains <- 2	# number of parallel heated chains
> 
> set.seed(1)
> fm <- fabMix( model = c("UUU", "CCC"), nChains = nChains, 
+ 	rawData = syntheticDataset$data, outDir = "toyExample",
+         Kmax = Kmax, mCycles = 4, burnCycles = 1, q = qRange,
+         g = 0.5, h = 0.5, alpha_sigma = 0.5, beta_sigma = 0.5, 
+         warm_up_overfitting = 2, warm_up = 5) 
         ____      __    __  ____      
        / __/___ _/ /_  /  |/  (_)  __ 
       / /_/ __ `/ __ \/ /|_/ / / |/_/ 
      / __/ /_/ / /_/ / /  / / />  <   
     /_/  \__,_/_.___/_/  /_/_/_/|_|  version 4.3 

-    Data consists of p = 5 variables and n = 8 observations
-    MCMC parameters: g = 0.5, h = 0.5, alpha_sigma = 0.5, beta_sigma = 0.5
-         using Nchains = 2 
-         target posterior distribution corresponds to alpha = 0.25 
-    The sampler uses standardized data. 
Loading required package: foreach
Loading required package: rngtools
Loading required package: pkgmaker
Loading required package: registry

-    Parameterization: UUU model 
-    Number of factors: q = 2
-    (1) Initializing from priors that lead to overfitting...  OK 
-    (2) Initializing the actual model from the previously obtained values...  OK 
-    (3) Running the sampler...  

-    DONE. 
-    (4) Computing information criteria for q = 2 
-    NOTE: using standardizing data. 
         - Entering directory: /myspace/Dropbox/sparseFA_MIX/heated_prior/fabMixPackage/version_4.3/fabMix.Rcheck/toyExample/UUU_2 
            Nclusters:    2 
            Frequency:    3 
         - Information criteria written to `UUU_2/informationCriteria_map_model.txt`. 

-    Parameterization: CCC model 
-    Number of factors: q = 2
-    (1) Initializing from priors that lead to overfitting...  OK 
-    (2) Initializing the actual model from the previously obtained values...  OK 
-    (3) Running the sampler...  

-    DONE. 
-    (4) Computing information criteria for q = 2 
-    NOTE: using standardizing data. 
         - Entering directory: /myspace/Dropbox/sparseFA_MIX/heated_prior/fabMixPackage/version_4.3/fabMix.Rcheck/toyExample/CCC_2 
            Nclusters:    2     3 
            Frequency:    2    1 
         - Information criteria written to `CCC_2/informationCriteria_map_model.txt`. 
-    The label.switching package says hello. 
-    (5) Dealing with label switching for q = 2 
         * Entering directory: /myspace/Dropbox/sparseFA_MIX/heated_prior/fabMixPackage/version_4.3/fabMix.Rcheck/toyExample/CCC_2 
         * Posterior mode corresponds to K = 2 

    ......................................................................................
    . Method                         Time (sec)           Status                         . 
    ......................................................................................
    . ECR                            0.023                OK                             . 
    . ECR-ITERATIVE-1                0.003                Converged (2 iterations)       . 
    ......................................................................................

    Relabelling all methods according to method ECR ... done!
    Retrieve the 2 permutation arrays by typing:
        [...]$permutations$"ECR"
        [...]$permutations$"ECR-ITERATIVE-1"
    Retrieve the 2 best clusterings: [...]$clusters
    Retrieve the 2 CPU times: [...]$timings
    Retrieve the 2 X 2 similarity matrix: [...]$similarity
    Label switching finished. Total time: 0 seconds. 
-    Done. 
-    Cleaning: deleting directory `toyExample` ... done. 

Given the specified range of models, factors, maximum number of clusters and MCMC parameters,
the best model corresponds to the CCC parameterization with q = 2 factors and K = 2 clusters. 
The BIC for this model equals 111.942. 
> 
> # WARNING: the following parameters: 
> #  Kmax, nChains, mCycles, burnCycles, warm_up_overfitting, warm_up 
> #	 should take (much) _larger_ values. E.g. a typical implementation consists of:
> #        Kmax = 20, nChains >= 3, mCycles = 1100, burnCycles = 100, 
> #        warm_up_overfitting = 500, warm_up = 5000. 
> 
> # Now print a run summary and produce some plots. 
> print(fm)

* Run information: 
      Number of fitted models: (1 different number of factors) x (2 parameterizations) = 2 models.
      Selected model: CCC model with K = 2 and q = 2 factors.
* Estimated number of observations per cluster: 

1 4 
5 3 
* Posterior mean of the mean per cluster: 
        1     4
V1 -0.624  1.11
V2  0.029  0.61
V3  0.584 -1.44
V4  0.381 -0.61
V5 -0.838  1.13
> plot(fm, what = "BIC")
> 
> #################################################################
> # (b) using 12 cores_____________________________________________
> #_______4 models with 3 heated chains running in parallel________
> #_______considering all 8 model parameterizations________________
> #################################################################
> ## Not run: 
> ##D library('fabMix')
> ##D set.seed(99)
> ##D n = 100                # sample size
> ##D p = 30                # number of variables
> ##D q = 2                # number of factors
> ##D K = 5		     # number of clusters
> ##D sINV_diag = rep(1/100,p) 	# diagonal of inverse variance of errors
> ##D syntheticDataset <- simData(sameLambda=FALSE,K.true = K, n = n, q = q, p = p, 
> ##D 			sINV_values = sINV_diag)
> ##D colnames(syntheticDataset$data) <- paste0("x_",1:p)
> ##D qRange <- 1:3	# range of values for the number of factors
> ##D Kmax <- 20	# number of components for the overfitted mixture model
> ##D nChains <- 3	# number of parallel heated chains
> ##D 
> ##D # the next command takes ~ 1 hour in a Linux workstation with 12 threads.
> ##D fm <- fabMix( parallelModels = 4, 
> ##D 	nChains = nChains, 
> ##D 	model = c("UUU","CUU","UCU","CCU","UCC","UUC","CUC","CCC"), 
> ##D 	rawData = syntheticDataset$data, outDir = "toyExample_b",
> ##D         Kmax = Kmax, mCycles = 600, burnCycles = 100, q = qRange,
> ##D         g = 0.5, h = 0.5, alpha_sigma = 0.5, beta_sigma = 0.5, 
> ##D         warm_up_overfitting = 500, warm_up = 5000) 
> ##D print(fm)
> ##D plot(fm, what = "BIC")
> ##D plot(fm, what = "classification_pairs")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:doRNG’, ‘package:rngtools’, ‘package:pkgmaker’,
  ‘package:registry’, ‘package:foreach’

> nameEx("fabMix")
> ### * fabMix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix
> ### Title: Main function
> ### Aliases: fabMix
> 
> ### ** Examples
> 
> #################################################################
> # (b) using 12 cores_____________________________________________
> #_______4 models with 3 heated chains running in parallel________
> #_______considering all 8 model parameterizations________________
> #################################################################
> ## Not run: 
> ##D library('fabMix')
> ##D set.seed(99)
> ##D n = 200                # sample size
> ##D p = 30                # number of variables
> ##D q = 2                # number of factors
> ##D K = 5		     # number of clusters
> ##D sINV_diag = rep(1/20,p) 	# diagonal of inverse variance of errors
> ##D syntheticDataset <- simData(sameLambda=FALSE,K.true = K, n = n, q = q, p = p, 
> ##D 			sINV_values = sINV_diag)
> ##D colnames(syntheticDataset$data) <- paste0("x_",1:p)
> ##D qRange <- 1:3	# range of values for the number of factors
> ##D Kmax <- 20	# number of components for the overfitted mixture model
> ##D nChains <- 3	# number of parallel heated chains
> ##D 
> ##D # the next command takes ~ 2 hours in a Linux machine with 12 threads.
> ##D 
> ##D fm <- fabMix( parallelModels = 4, 
> ##D 	nChains = nChains, 
> ##D 	model = c("UUU","CUU","UCU","CCU","UCC","UUC","CUC","CCC"), 
> ##D 	rawData = syntheticDataset$data, outDir = "toyExample_b",
> ##D         Kmax = Kmax, mCycles = 1100, burnCycles = 100, q = qRange) 
> ##D 
> ##D print(fm)
> ##D plot(fm, what = "BIC")
> ##D plot(fm, what = "classification_pairs")
> ##D # see also
> ##D # plot(fm)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.151 0.084 1.542 0.367 0.15 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
