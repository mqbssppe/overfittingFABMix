
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fabMix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "fabMix-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('fabMix')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fabMix-package")
> ### * fabMix-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix-package
> ### Title: Overfitting Bayesian Mixtures of Factor Analyzers with an
> ###   Unknown Number of Components
> ### Aliases: fabMix-package
> ### Keywords: package
> 
> ### ** Examples
> 
> # simulate a synthetic dataset along the lines of the paper:
> n = 1000              # sample size
> p = 40                # number of variables
> q = 4                 # number of factors
> K = 10                # number of clusters
> sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> set.seed(10)
> syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
Simulation parameters: 
   n = 1000 
   p = 40 
   q = 4 
   K = 10 
> 
> ## Not run: 
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax	
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D         outputFolder = outputFolder, q = q, 
> ##D         compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix")
> ### * fabMix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix
> ### Title: Main function
> ### Aliases: fabMix
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix_CxC")
> ### * fabMix_CxC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix_CxC
> ### Title: Main function of the package for CUC, CCC models
> ### Aliases: fabMix_CxC
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix_CxC( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D #getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D #dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D #        outputFolder = outputFolder, q = q, 
> ##D #        compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix_CxC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix_CxU")
> ### * fabMix_CxU
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix_CxU
> ### Title: Main function of the package for CCU, CUU models
> ### Aliases: fabMix_CxU
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix_CxU( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D #getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D #dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D #        outputFolder = outputFolder, q = q, 
> ##D #        compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix_CxU", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix_UxC")
> ### * fabMix_UxC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix_UxC
> ### Title: Main function of the package for UUC, UCC models
> ### Aliases: fabMix_UxC
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix_UxC( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D #getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D #dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D #        outputFolder = outputFolder, q = q, 
> ##D #        compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix_UxC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix_UxU")
> ### * fabMix_UxU
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix_UxU
> ### Title: Fit UxU mixtures
> ### Aliases: fabMix_UxU
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix_UxU( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D         outputFolder = outputFolder, q = q, 
> ##D         compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix_UxU", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fabMix_missing_values")
> ### * fabMix_missing_values
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fabMix_missing_values
> ### Title: Main function for the case of missing values
> ### Aliases: fabMix_missing_values
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a synthetic dataset along the lines of the paper:
> ##D n = 1000              # sample size
> ##D p = 40                # number of variables
> ##D q = 4                 # number of factors
> ##D K = 10                # number of clusters
> ##D sINV_diag = 1/((1:p)) # diagonal of inverse variance of errors
> ##D set.seed(10)
> ##D syntheticDataset <- simData(K.true = K, n = n, q = q, p = p, sINV_values = sINV_diag )
> ##D 
> ##D # define parameters
> ##D Kmax <- 20    # number of overfitted mixture components
> ##D nChains <- 8  # number of parallel chains
> ##D dN <- 1
> ##D # Dirichlet prior of mixture weights per chain.
> ##D #   The target chain corresponds to the first entry.
> ##D dirPriorAlphas <- c(1, 1 + dN * (2:nChains - 1))/Kmax   
> ##D outputFolder <- "fabMixExample"
> ##D # Run algorithm
> ##D fabMix( dirPriorAlphas = dirPriorAlphas, 
> ##D         rawData = syntheticDataset$data, 
> ##D         outDir = outputFolder, Kmax = Kmax, mCycles = 1200, 
> ##D         burnCycles = 200, q = q) 
> ##D 
> ##D # Compute information criteria:
> ##D getStuffForDIC(x_data = syntheticDataset$data, outputFolder = outputFolder, q = q)
> ##D 
> ##D # Deal with label switching:
> ##D dealWithLabelSwitching(x_data = syntheticDataset$data, 
> ##D         outputFolder = outputFolder, q = q, 
> ##D         compute_regularized_expression = TRUE, Km = Kmax)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fabMix_missing_values", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.337 0.004 0.341 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
